# VIBIFY - Project Structure Outline

## 📝 IMPORTANT NOTE
**This file is the living documentation of our project structure.**
- ✅ **Always update this file** when we add/remove/modify folders or files
- ✅ **Keep it current** with the actual project structure
- ✅ **Reference this file** when making architectural decisions
- ✅ **Use as roadmap** for Cursor AI development

## 🏗️ MONOREPO ARCHITECTURE

```
vibify/
├── 📁 src/
│   ├── 📁 backend/                    # Python FastAPI Backend (UV managed)
│   │   ├── 📁 app/
│   │   │   ├── 📁 api/               # API endpoints
│   │   │   │   ├── 📄 songs.py       # Song discovery, search, random
│   │   │   │   ├── 📄 playlists.py   # Playlist CRUD operations
│   │   │   │   ├── 📄 albums.py      # Album pages, add to playlist
│   │   │   │   ├── 📄 upload.py      # Music upload endpoints ✅ CREATED
│   │   │   │   ├── 📄 tags.py        # Genre filtering
│   │   │   │   └── 📄 auth.py        # Authentication
│   │   │   ├── 📁 services/          # Business logic layer
│   │   │   │   ├── 📄 song_service.py
│   │   │   │   ├── 📄 playlist_service.py
│   │   │   │   ├── 📄 upload_service.py ✅ CREATED
│   │   │   │   ├── 📄 album_service.py
│   │   │   │   └── 📄 auth_service.py
│   │   │   ├── 📁 models/            # Database models
│   │   │   │   ├── 📄 song.py
│   │   │   │   ├── 📄 playlist.py
│   │   │   │   ├── 📄 upload.py
│   │   │   │   └── 📄 user.py
│   │   │   ├── 📁 database/          # Database connection & config
│   │   │   │   ├── 📄 connection.py
│   │   │   │   ├── 📁 migrations/
│   │   │   │   └── 📄 seed_data.py
│   │   │   ├── 📁 utils/             # Utilities
│   │   │   │   ├── 📄 b2_client.py   # Backblaze B2 integration
│   │   │   │   ├── 📄 validators.py  # File validation ✅ CREATED
│   │   │   │   └── 📄 helpers.py     # Helper utilities ✅ CREATED
│   │   │   ├── 📁 config/            # Configuration
│   │   │   │   ├── 📄 settings.py    # Pydantic settings ✅ UPDATED
│   │   │   │   ├── 📄 logging.py     # Centralized logging ✅ CREATED
│   │   │   │   └── 📄 env.py         # Environment utilities ✅ CREATED
│   │   │   └── 📄 main.py            # FastAPI app setup
│   │   ├── 📁 scripts/               # Upload and utility scripts
│   │   │   ├── 📄 upload_from_json.py    # JSON to Supabase upload ✅ CREATED
│   │   │   ├── 📄 upload_complete.py     # Complete upload process ✅ CREATED
│   │   │   ├── 📄 upload_to_supabase.py  # Legacy upload script ✅ MOVED
│   │   │   └── 📁 b2_upload/         # B2 upload utilities
│   │   │       └── 📄 upload_files_to_b2.py  # B2 file upload ✅ CREATED
│   │   ├── 📁 tests/                 # Test suite
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 conftest.py        # Pytest configuration
│   │   │   ├── 📁 app/               # Tests mirroring app structure
│   │   │   │   ├── 📁 api/           # API tests
│   │   │   │   │   ├── 📄 test_songs.py      # Songs API tests ✅ MOVED
│   │   │   │   │   ├── 📄 test_upload.py     # Upload API tests
│   │   │   │   │   ├── 📄 test_playlists.py  # Playlists tests
│   │   │   │   │   └── 📄 test_auth.py       # Authentication tests
│   │   │   │   ├── 📁 services/      # Service tests
│   │   │   │   │   ├── 📄 test_song_service.py
│   │   │   │   │   ├── 📄 test_upload_service.py
│   │   │   │   │   └── 📄 test_playlist_service.py
│   │   │   │   └── 📁 utils/         # Utility tests
│   │   │   │       ├── 📄 test_b2_client.py  # B2 client tests ✅ MOVED
│   │   │   │       └── 📄 test_validators.py
│   │   ├── 📄 pyproject.toml         # UV project configuration
│   │   ├── 📄 uv.lock               # UV lock file
│   │   ├── 📄 .python-version       # Python version
│   │   ├── 📄 requirements.txt      # Fallback requirements
│   │   ├── 📄 Dockerfile
│   │   └── 📄 .env.example
│   │
│   ├── 📁 frontend/                   # Next.js 14 Frontend
│   │   ├── 📁 src/
│   │   │   ├── 📁 app/               # Next.js App Router
│   │   │   │   ├── 📄 layout.tsx     # Root layout
│   │   │   │   ├── 📄 page.tsx       # Home page
│   │   │   │   ├── 📁 (dashboard)/   # Dashboard routes
│   │   │   │   │   ├── 📄 page.tsx   # Main dashboard
│   │   │   │   │   ├── 📁 search/    # Search page
│   │   │   │   │   │   └── 📄 page.tsx
│   │   │   │   │   ├── 📁 album/     # Album pages
│   │   │   │   │   │   └── 📁 [id]/
│   │   │   │   │   │       └── 📄 page.tsx
│   │   │   │   │   ├── 📁 playlist/  # Playlist pages
│   │   │   │   │   │   └── 📁 [id]/
│   │   │   │   │   │       └── 📄 page.tsx
│   │   │   │   │   └── 📁 upload/    # Upload page
│   │   │   │   │       └── 📄 page.tsx
│   │   │   │   └── 📁 api/           # API routes (if needed)
│   │   │   ├── 📁 components/        # React components
│   │   │   │   ├── 📁 ui/            # shadcn/ui components
│   │   │   │   ├── 📁 song/          # Song-related components
│   │   │   │   │   ├── 📄 song-card.tsx
│   │   │   │   │   ├── 📄 song-player.tsx
│   │   │   │   │   ├── 📄 random-feed.tsx
│   │   │   │   │   ├── 📄 song-search.tsx
│   │   │   │   │   └── 📄 genre-tabs.tsx
│   │   │   │   ├── 📁 playlist/      # Playlist components
│   │   │   │   │   ├── 📄 playlist-card.tsx
│   │   │   │   │   ├── 📄 playlist-manager.tsx
│   │   │   │   │   └── 📄 add-to-playlist.tsx
│   │   │   │   ├── 📁 album/         # Album components
│   │   │   │   │   ├── 📄 album-page.tsx
│   │   │   │   │   ├── 📄 album-card.tsx
│   │   │   │   │   └── 📄 add-album-to-playlist.tsx
│   │   │   │   ├── 📁 upload/        # Upload components
│   │   │   │   │   ├── 📄 music-upload.tsx
│   │   │   │   │   ├── 📄 upload-progress.tsx
│   │   │   │   │   └── 📄 file-validator.tsx
│   │   │   │   ├── 📁 layout/        # Layout components
│   │   │   │   │   ├── 📄 header.tsx
│   │   │   │   │   ├── 📄 sidebar.tsx
│   │   │   │   │   └── 📄 player-bar.tsx
│   │   │   │   └── 📁 common/        # Shared components
│   │   │   │       ├── 📄 loading.tsx
│   │   │   │       ├── 📄 error.tsx
│   │   │   │       └── 📄 pagination.tsx
│   │   │   ├── 📁 lib/               # Utilities & config
│   │   │   │   ├── 📄 api.ts         # API client
│   │   │   │   ├── 📄 auth.ts        # Auth utilities
│   │   │   │   ├── 📄 utils.ts       # Helper functions
│   │   │   │   └── 📄 constants.ts   # App constants
│   │   │   ├── 📁 store/             # State management
│   │   │   │   ├── 📄 song-store.ts  # Song state
│   │   │   │   ├── 📄 playlist-store.ts
│   │   │   │   ├── 📄 player-store.ts
│   │   │   │   └── 📄 auth-store.ts
│   │   │   ├── 📁 hooks/             # Custom React hooks
│   │   │   │   ├── 📄 use-songs.ts
│   │   │   │   ├── 📄 use-playlists.ts
│   │   │   │   ├── 📄 use-player.ts
│   │   │   │   └── 📄 use-upload.ts
│   │   │   └── 📁 types/             # TypeScript types
│   │   │       ├── 📄 song.ts
│   │   │       ├── 📄 playlist.ts
│   │   │       ├── 📄 upload.ts
│   │   │       └── 📄 api.ts
│   │   ├── 📄 package.json
│   │   ├── 📄 next.config.js
│   │   ├── 📄 tailwind.config.js
│   │   ├── 📄 tsconfig.json
│   │   └── 📄 .env.local.example
│   │
│   └── 📁 shared/                     # Shared code between frontend/backend
│       ├── 📁 types/                 # Shared TypeScript types
│       │   ├── 📄 song.ts
│       │   ├── 📄 playlist.ts
│       │   ├── 📄 upload.ts
│       │   └── 📄 api.ts
│       ├── 📁 constants/             # Shared constants
│       │   ├── 📄 api-endpoints.ts
│       │   └── 📄 validation-rules.ts
│       └── 📁 utils/                 # Shared utilities
│           ├── 📄 formatters.ts
│           └── 📄 validators.ts
│
├── 📁 docs/                          # Documentation
│   ├── 📄 api.md
│   ├── 📄 database-schema.md
│   └── 📄 deployment.md
│
├── 📁 scripts/                       # Development scripts
│   ├── 📄 setup.sh
│   ├── 📄 dev.sh
│   ├── 📄 build.sh
│   └── 📄 deploy.sh
│
├── 📄 .gitignore
├── 📄 README.md
├── 📄 features.txt                   # Feature documentation
├── 📄 project-structure.txt          # This file
├── 📄 docker-compose.yml             # Local development
├── 📄 Procfile                       # Heroku deployment
└── 📄 package.json                   # Root package.json for scripts
```

## 🎯 KEY ARCHITECTURE DECISIONS

### **1. Monorepo Structure:**
- **`src/backend/`** - Python FastAPI (separate server)
- **`src/frontend/`** - Next.js 14 (separate server)
- **`src/shared/`** - Common types & utilities

### **2. Feature-Based Organization:**
- **Song components** → `components/song/`
- **Playlist components** → `components/playlist/`
- **Album components** → `components/album/`
- **Upload components** → `components/upload/`

### **3. Clear Separation:**
- **API layer** → `backend/app/api/`
- **Business logic** → `backend/app/services/`
- **Data models** → `backend/app/models/`
- **UI components** → `frontend/src/components/`

### **4. AI-Friendly Structure:**
- **Clear file names** (song-card.tsx, playlist-manager.tsx)
- **Logical grouping** (all song features in one folder)
- **Consistent patterns** (service → component → hook)

## 🚀 DEVELOPMENT WORKFLOW

### **Local Development:**
```bash
# Backend (Python)
cd src/backend
python -m uvicorn app.main:app --reload

# Frontend (Next.js)
cd src/frontend
npm run dev
```

### **Production:**
- **Backend** → Heroku (Python + Gunicorn)
- **Frontend** → Vercel/Netlify (Next.js)
- **Database** → Supabase (PostgreSQL)
- **Storage** → Backblaze B2 (Audio files)

## 📊 FEATURE MAPPING

### **Song Features:**
- **Discovery** → `components/song/random-feed.tsx`
- **Search** → `components/song/song-search.tsx`
- **Player** → `components/song/song-player.tsx`
- **API** → `backend/app/api/songs.py`

### **Playlist Features:**
- **Management** → `components/playlist/playlist-manager.tsx`
- **Add Songs** → `components/playlist/add-to-playlist.tsx`
- **API** → `backend/app/api/playlists.py`

### **Album Features:**
- **Pages** → `components/album/album-page.tsx`
- **Add to Playlist** → `components/album/add-album-to-playlist.tsx`
- **API** → `backend/app/api/albums.py`

### **Upload Features:**
- **Upload Form** → `components/upload/music-upload.tsx`
- **Progress** → `components/upload/upload-progress.tsx`
- **API** → `backend/app/api/upload.py`

## 🔧 TECHNICAL STACK

### **Backend:**
- **Python** + **FastAPI** for API
- **Supabase** for database & auth
- **B2 Backblaze** for audio storage
- **Gunicorn** for production server

### **Frontend:**
- **Next.js 14** + **TypeScript** + **React**
- **Tailwind CSS** + **shadcn/ui** for styling
- **Zustand** for state management
- **Howler.js** for audio playback

### **Database:**
- **PostgreSQL** (via Supabase)
- **Row Level Security** for user data
- **Full-text search** with GIN indexes
- **Optimized queries** for 10k+ songs

## 🔄 MAINTENANCE WORKFLOW

### **When Making Changes:**
1. **Make the actual change** (add/remove/modify files)
2. **Update this file** (`project-structure.txt`) to reflect the change
3. **Keep it synchronized** with the real project structure
4. **Use as reference** for future development

### **Why This Matters:**
- **Cursor AI** uses this file to understand project structure
- **Team members** can quickly see the current architecture
- **Documentation** stays current with actual code
- **Consistency** across all development phases
