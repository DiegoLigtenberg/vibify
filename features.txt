# VIBIFY - Spotify Clone Features & Database Mapping

## 🎵 CORE MUSIC FEATURES

### 1. SONG DISCOVERY & BROWSING
**Feature**: Random song discovery with pagination
**Tables**: `songs`
**Key Fields**: 
- `id`, `title`, `artist`, `album`, `duration`
- `storage_url` (B2 Backblaze), `thumbnail_url`
- `search_vector` (full-text search)
**API Endpoints**: `/api/songs/random`, `/api/songs/search`

### 2. SEARCH FUNCTIONALITY
**Feature**: Full-text search across songs
**Tables**: `songs`
**Key Fields**: `search_vector` (GIN index for fast search)
**Search Fields**: `title`, `artist`, `album`, `description`
**API Endpoints**: `/api/songs/search?q=query`

### 3. GENRE FILTERING
**Feature**: Browse songs by genre/tags
**Tables**: `songs`, `tags`, `song_tags`
**Key Fields**: 
- `tags.name` (genre names)
- `song_tags.song_id`, `song_tags.tag_id` (many-to-many)
**API Endpoints**: `/api/songs/genre/{genre}`, `/api/tags`

### 4. ALBUM PAGES
**Feature**: View album details and songs
**Tables**: `songs`
**Key Fields**: `album`, `artist`, `thumbnail_url`, `release_date`
**API Endpoints**: `/api/albums/{album}`, `/api/albums/{album}/songs`

## 🎧 USER INTERACTION FEATURES

### 5. PLAYLIST MANAGEMENT
**Feature**: Create, edit, delete custom playlists
**Tables**: `playlists`, `playlist_songs`
**Key Fields**:
- `playlists.name`, `playlists.description`, `playlists.user_id`
- `playlist_songs.song_id`, `playlist_songs.position`
**API Endpoints**: `/api/playlists`, `/api/playlists/{id}/songs`

### 6. ADD ALBUM TO PLAYLIST
**Feature**: Add entire album to user playlist
**Tables**: `songs`, `playlists`, `playlist_songs`
**Workflow**: Query songs by album → Add each song to playlist
**API Endpoints**: `/api/playlists/{id}/add-album`

### 7. SONG LIKING
**Feature**: Like/unlike songs
**Tables**: `liked_songs`
**Key Fields**: `user_id`, `song_id`, `liked_at`
**API Endpoints**: `/api/songs/{id}/like`, `/api/songs/{id}/unlike`

### 8. RECENTLY PLAYED
**Feature**: Automatic "Recently Played" playlist
**Tables**: `song_plays`, `playlists` (with `is_auto_playlist=true`)
**Key Fields**: `song_plays.played_at`, `song_plays.user_id`
**API Endpoints**: `/api/playlists/recently-played`

## 📤 UPLOAD & CONTENT CREATION

### 9. MUSIC UPLOAD
**Feature**: Upload audio files with validation
**Tables**: `uploads`, `upload_validations`, `songs`
**Key Fields**:
- `uploads.filename`, `uploads.storage_path`, `uploads.status`
- `upload_validations.validation_type`, `upload_validations.is_valid`
- `songs.uploaded_by`, `songs.storage_url`
**Workflow**: Upload → Validate → Create song record
**API Endpoints**: `/api/upload`, `/api/upload/{id}/status`

### 10. FILE VALIDATION
**Feature**: Validate audio files before processing
**Tables**: `upload_validations`
**Validation Types**: `file_type`, `file_size`, `audio_quality`, `metadata_extraction`
**API Endpoints**: `/api/upload/{id}/validate`

### 11. THUMBNAIL GENERATION
**Feature**: Auto-generate thumbnails for uploaded songs
**Tables**: `uploads`, `songs`
**Key Fields**: `uploads.thumbnail_path`, `songs.thumbnail_url`
**API Endpoints**: `/api/upload/{id}/thumbnail`

## 🔍 ADVANCED FEATURES

### 12. LISTENING HISTORY
**Feature**: Track what users listen to
**Tables**: `song_plays`
**Key Fields**: `user_id`, `song_id`, `played_at`, `duration_played`
**API Endpoints**: `/api/songs/{id}/play`, `/api/users/history`

### 13. SONG METADATA
**Feature**: Rich song information
**Tables**: `songs`
**Key Fields**: 
- Basic: `title`, `artist`, `album`, `duration`
- Extended: `description`, `release_date`, `youtube_url`
- Stats: `view_count`, `like_count`
- Storage: `file_size_bytes`, `thumbnail_size_bytes`

### 14. USER PRIVACY
**Feature**: Public/private content control
**Tables**: `songs`, `playlists`
**Key Fields**: `is_public`, `uploaded_by`, `user_id`
**RLS Policies**: Users can only see their own private content

## 🏗️ DATABASE ARCHITECTURE

### CORE TABLES (9 total):
1. **songs** - Main music metadata (TEXT ID for human readability)
2. **playlists** - User-created playlists
3. **playlist_songs** - Many-to-many song-playlist relationship
4. **liked_songs** - User song likes
5. **song_plays** - Listening history (capped for performance)
6. **tags** - Genre/category tags
7. **song_tags** - Many-to-many song-tag relationship
8. **uploads** - File upload tracking
9. **upload_validations** - File validation results

### KEY CONSTRAINTS:
- **Foreign Keys**: Proper referential integrity
- **RLS Policies**: Row-level security for user data
- **Check Constraints**: Data validation (duration > 0, file_size > 0)
- **Indexes**: Optimized for fast queries (GIN, B-tree, composite)

### PERFORMANCE OPTIMIZATIONS:
- **Pagination**: All list endpoints support limit/offset
- **Search**: GIN index on `search_vector` for fast full-text search
- **Capping**: `song_plays` table capped to prevent infinite growth
- **Lazy Loading**: Songs loaded on-demand, not all at once

## 🚀 API ENDPOINTS SUMMARY

### Songs:
- `GET /api/songs/random` - Random song discovery
- `GET /api/songs/search` - Search songs
- `GET /api/songs/genre/{genre}` - Songs by genre
- `POST /api/songs/{id}/like` - Like song
- `POST /api/songs/{id}/play` - Track play

### Playlists:
- `GET /api/playlists` - User playlists
- `POST /api/playlists` - Create playlist
- `GET /api/playlists/{id}/songs` - Playlist songs
- `POST /api/playlists/{id}/add-album` - Add album to playlist

### Upload:
- `POST /api/upload` - Upload music file
- `GET /api/upload/{id}/status` - Upload status
- `POST /api/upload/{id}/validate` - Validate file

### Albums:
- `GET /api/albums/{album}` - Album details
- `GET /api/albums/{album}/songs` - Album songs

## 🎯 MVP FEATURE PRIORITY

### TIER 1 (Essential):
1. Song discovery & browsing
2. Search functionality
3. Playlist management
4. Music upload
5. Basic album pages

### TIER 2 (Important):
6. Genre filtering
7. Song liking
8. Recently played
9. File validation

### TIER 3 (Nice to have):
10. Advanced metadata
11. Thumbnail generation
12. Listening history analytics

## 🔧 TECHNICAL STACK

### Backend:
- **Python** + **FastAPI** for API
- **Supabase** for database & auth
- **B2 Backblaze** for audio storage
- **Gunicorn** for production server

### Frontend:
- **Next.js 14** + **TypeScript** + **React**
- **Tailwind CSS** + **shadcn/ui** for styling
- **Zustand** for state management
- **Howler.js** for audio playback

### Database:
- **PostgreSQL** (via Supabase)
- **Row Level Security** for user data
- **Full-text search** with GIN indexes
- **Optimized queries** for 10k+ songs
